import OpenAI from 'openai';
import { AppError } from '../core/errors/AppError';
import { MarketService } from './marketService';
import { ChatMessage } from '../types/chat';

if (!process.env.DEEPSEEK_API_KEY) {
  throw new Error('DEEPSEEK_API_KEY n√£o est√° configurada no ambiente');
}

const openai = new OpenAI({
  apiKey: process.env.DEEPSEEK_API_KEY,
  baseURL: 'https://api.deepseek.com/v1',
  timeout: 10000,
});

// ===== SISTEMA DE PERSONALIDADE APRIMORADO =====

const PERSONALITY_TRAITS = `
# TRA√áOS DE PERSONALIDADE DO FINN
1. Estilo Conversacional:
   - Calmo e paciente, como um consultor experiente
   - Emp√°tico - reconhece sentimentos e situa√ß√µes financeiras delicadas
   - Motivacional - incentiva boas pr√°ticas financeiras
   - Humor sutil e apropriado (sem piadas for√ßadas)
   - Adapta√ß√£o cultural brasileira com regionalismos

2. Padr√µes de Fala:
   - Usa contra√ß√µes ("t√°" em vez de "est√°", "pra" em vez de "para")
   - Intercala perguntas ret√≥ricas ("Sabe por que isso √© importante?")
   - Usa exemplos pessoais ("Meu outro cliente teve uma situa√ß√£o parecida...")
   - Express√µes positivas ("Boa escolha!", "Excelente pergunta!")
   - G√≠rias brasileiras apropriadas ("beleza", "valeu", "tranquilo")

3. Adapta√ß√£o ao Usu√°rio:
   - N√≠vel t√©cnico: b√°sico/intermedi√°rio/avan√ßado
   - Tom: mais formal com empres√°rios, mais casual com jovens
   - Refer√™ncias culturais brasileiras
   - Adapta√ß√£o regional (SP, RJ, MG, RS, etc.)
   - Detec√ß√£o de contexto (trabalho, lazer, fam√≠lia)

4. Sistema de Humor Contextual:
   - Humor leve em momentos apropriados
   - Refer√™ncias a situa√ß√µes financeiras comuns
   - Piadas sobre "carteira vazia" vs "carteira cheia"
   - Analogias engra√ßadas sobre investimentos
`;

// ===== SISTEMA DE DETEC√á√ÉO CULTURAL BRASILEIRA =====

class BrazilianCulturalContext {
  private regionalExpressions = {
    'sp': ['mano', 'beleza', 'tranquilo', 'valeu'],
    'rj': ['cara', 'massa', 'legal', 'show'],
    'mg': ['trem', 'uai', 's√¥', 'v√©io'],
    'rs': ['bah', 'tch√™', 'guri', 'guria'],
    'pr': ['v√©io', 'mano', 'tranquilo'],
    'sc': ['bah', 'tch√™', 'guri'],
    'ba': ['mano', 'beleza', 'tranquilo'],
    'pe': ['cara', 'massa', 'legal'],
    'ce': ['cara', 'massa', 'legal'],
    'go': ['mano', 'beleza', 'tranquilo']
  };

  private culturalReferences = {
    'carnaval': ['bloco', 'fantasia', 'samba', 'festa'],
    'futebol': ['gol', 'time', 'jogo', 'campeonato'],
    'comida': ['feijoada', 'churrasco', 'pizza', 'hamb√∫rguer'],
    'trabalho': ['escrit√≥rio', 'reuni√£o', 'chefe', 'projeto'],
    'familia': ['filho', 'filha', 'esposa', 'marido', 'pais'],
    'viagem': ['praia', 'montanha', 'cidade', 'hotel']
  };

  detectRegionalContext(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    for (const [region, expressions] of Object.entries(this.regionalExpressions)) {
      for (const expression of expressions) {
        if (lowerMessage.includes(expression)) {
          return region;
        }
      }
    }
    
    return 'default';
  }

  detectCulturalContext(message: string): string[] {
    const lowerMessage = message.toLowerCase();
    const detectedContexts: string[] = [];
    
    for (const [context, keywords] of Object.entries(this.culturalReferences)) {
      for (const keyword of keywords) {
        if (lowerMessage.includes(keyword)) {
          detectedContexts.push(context);
          break;
        }
      }
    }
    
    return detectedContexts;
  }

  getRegionalExpression(region: string): string {
    const expressions = this.regionalExpressions[region] || this.regionalExpressions['default'];
    return expressions[Math.floor(Math.random() * expressions.length)];
  }

  getCulturalResponse(contexts: string[]): string {
    const responses = {
      'carnaval': 'üé≠ Ah, √©poca de festa! Mas lembra que o dinheiro tamb√©m precisa dan√ßar no seu bolso!',
      'futebol': '‚öΩ Futebol √© paix√£o, mas investimento √© estrat√©gia! Que tal fazer um "gol de placa" nas suas finan√ßas?',
      'comida': 'üçΩÔ∏è Comida boa √© tudo de bom! Mas que tal "saborear" tamb√©m os lucros dos seus investimentos?',
      'trabalho': 'üíº Trabalho duro merece recompensa! Que tal investir parte do seu suor em algo que trabalhe por voc√™?',
      'familia': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Fam√≠lia √© tudo! E que tal garantir um futuro financeiro tranquilo para eles?',
      'viagem': '‚úàÔ∏è Viagem √© sempre uma boa ideia! Mas que tal planejar uma viagem para o futuro com investimentos?'
    };

    if (contexts.length > 0) {
      const context = contexts[0];
      return responses[context] || '';
    }
    
    return '';
  }
}

// ===== SISTEMA DE HUMOR CONTEXTUAL =====

class HumorSystem {
  private humorLevels = {
    'low': 0.2,    // Pouco humor
    'medium': 0.5, // Humor moderado
    'high': 0.8    // Mais humor
  };

  private financialJokes = {
    'carteira_vazia': [
      'üòÖ Carteira vazia √© igual a geladeira vazia - sempre d√° uma tristeza! Mas calma, vamos resolver isso!',
      'üí∏ Carteira mais vazia que o c√©u de S√£o Paulo no inverno! Mas n√£o desanima, vamos encher ela!',
      'üé≠ Carteira vazia √© como teatro vazio - sem gra√ßa! Mas a gente vai dar um show nas suas finan√ßas!'
    ],
    'investimento': [
      'üìà Investir √© como plantar feij√£o - voc√™ planta hoje e colhe amanh√£! (ou depois de amanh√£, ou... üòÖ)',
      'üå± Investimento √© igual a namoro - tem que ter paci√™ncia e n√£o desistir no primeiro problema!',
      'üéØ Investir √© como jogar futebol - √†s vezes voc√™ faz gol, √†s vezes toma gol, mas o importante √© continuar jogando!'
    ],
    'economia': [
      'üí∞ Economizar √© como dieta - todo mundo sabe que deve fazer, mas nem todo mundo consegue! üòÖ',
      'üè¶ Economia √© igual a academia - no come√ßo d√≥i, mas depois voc√™ fica viciado nos resultados!',
      'üí™ Economizar √© como parar de fumar - dif√≠cil no come√ßo, mas depois voc√™ se pergunta como vivia sem!'
    ]
  };

  shouldUseHumor(stressLevel: number, userContext: any): boolean {
    // Usar humor apenas se o usu√°rio n√£o estiver muito estressado
    if (stressLevel > 7) return false;
    
    // Usar humor com mais frequ√™ncia para usu√°rios casuais
    if (userContext?.subscriptionPlan === 'Gratuito') return Math.random() < 0.3;
    if (userContext?.subscriptionPlan === 'Essencial') return Math.random() < 0.2;
    if (userContext?.subscriptionPlan === 'Top') return Math.random() < 0.15;
    
    return Math.random() < 0.1; // Menos humor para Enterprise
  }

  getHumorResponse(context: string): string {
    const jokes = this.humorLevels[context] || this.humorLevels['low'];
    const availableJokes = this.financialJokes[context] || this.financialJokes['investimento'];
    
    if (Math.random() < jokes) {
      return availableJokes[Math.floor(Math.random() * availableJokes.length)];
    }
    
    return '';
  }

  detectHumorContext(message: string): string {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('carteira') && (lowerMessage.includes('vazia') || lowerMessage.includes('sem dinheiro'))) {
      return 'carteira_vazia';
    }
    
    if (lowerMessage.includes('investimento') || lowerMessage.includes('investir')) {
      return 'investimento';
    }
    
    if (lowerMessage.includes('economia') || lowerMessage.includes('economizar') || lowerMessage.includes('poupar')) {
      return 'economia';
    }
    
    return 'default';
  }
}

// ===== SISTEMA DE MEM√ìRIA DE RELACIONAMENTO =====

class RelationshipMemory {
  private userRelationships: Map<string, {
    interactionCount: number;
    firstInteraction: Date;
    lastInteraction: Date;
    favoriteTopics: string[];
    communicationStyle: 'formal' | 'casual' | 'mixed';
    trustLevel: number; // 0-10
    sharedJokes: string[];
    personalStories: Array<{ date: Date; story: string; category: string }>;
    milestones: Array<{ date: Date; milestone: string; shared: boolean }>;
  }> = new Map();

  updateRelationship(userId: string, message: string, response: string) {
    const relationship = this.getRelationship(userId);
    
    relationship.interactionCount++;
    relationship.lastInteraction = new Date();
    
    // Detectar estilo de comunica√ß√£o
    const formalWords = ['senhor', 'senhora', 'por favor', 'obrigado', 'agrade√ßo'];
    const casualWords = ['beleza', 'valeu', 'tranquilo', 'mano', 'cara'];
    
    const isFormal = formalWords.some(word => message.toLowerCase().includes(word));
    const isCasual = casualWords.some(word => message.toLowerCase().includes(word));
    
    if (isFormal && !isCasual) {
      relationship.communicationStyle = 'formal';
    } else if (isCasual && !isFormal) {
      relationship.communicationStyle = 'casual';
    } else {
      relationship.communicationStyle = 'mixed';
    }
    
    // Detectar t√≥picos favoritos
    const topics = this.extractTopics(message);
    topics.forEach(topic => {
      if (!relationship.favoriteTopics.includes(topic)) {
        relationship.favoriteTopics.push(topic);
      }
    });
    
    // Manter apenas os 5 t√≥picos mais frequentes
    relationship.favoriteTopics = relationship.favoriteTopics.slice(-5);
    
    // Aumentar confian√ßa com intera√ß√µes positivas
    if (response.includes('üéâ') || response.includes('parab√©ns') || response.includes('excelente')) {
      relationship.trustLevel = Math.min(10, relationship.trustLevel + 0.5);
    }
    
    this.userRelationships.set(userId, relationship);
  }

  getRelationship(userId: string) {
    return this.userRelationships.get(userId) || {
      interactionCount: 0,
      firstInteraction: new Date(),
      lastInteraction: new Date(),
      favoriteTopics: [],
      communicationStyle: 'mixed' as const,
      trustLevel: 5,
      sharedJokes: [],
      personalStories: [],
      milestones: []
    };
  }

  addPersonalStory(userId: string, story: string, category: string) {
    const relationship = this.getRelationship(userId);
    relationship.personalStories.push({
      date: new Date(),
      story,
      category
    });
    this.userRelationships.set(userId, relationship);
  }

  addSharedMilestone(userId: string, milestone: string) {
    const relationship = this.getRelationship(userId);
    relationship.milestones.push({
      date: new Date(),
      milestone,
      shared: true
    });
    this.userRelationships.set(userId, relationship);
  }

  getPersonalizedGreeting(userId: string): string {
    const relationship = this.getRelationship(userId);
    
    if (relationship.interactionCount === 1) {
      return 'Ol√°! Prazer em conhecer voc√™! üëã';
    }
    
    if (relationship.interactionCount < 5) {
      return 'Oi! Que bom te ver novamente! üòä';
    }
    
    if (relationship.interactionCount < 20) {
      return 'E a√≠! Como vai? üòÑ';
    }
    
    // Usu√°rio frequente
    const timeSinceLast = Date.now() - relationship.lastInteraction.getTime();
    const daysSinceLast = timeSinceLast / (1000 * 60 * 60 * 24);
    
    if (daysSinceLast > 7) {
      return 'Oi! Fazia tempo que n√£o convers√°vamos! Que bom te ver de volta! üéâ';
    }
    
    return 'E a√≠, parceiro! Tudo bem? üòé';
  }

  private extractTopics(text: string): string[] {
    const topics = ['investimentos', 'economia', 'metas', 'transa√ß√µes', 'd√≠vidas', 'poupan√ßa'];
    const detectedTopics: string[] = [];
    
    topics.forEach(topic => {
      if (text.toLowerCase().includes(topic)) {
        detectedTopics.push(topic);
      }
    });
    
    return detectedTopics;
  }
}

// ===== SISTEMA DE MEM√ìRIA EMOCIONAL =====

class EmotionalMemory {
  private userSentiments: Map<string, {
    lastEmotions: string[];
    stressLevel: number; // 0-10
    financialConcerns: string[];
    moodHistory: Array<{ date: Date; mood: string; intensity: number }>;
  }> = new Map();

  updateEmotionalContext(userId: string, message: string) {
    const context = this.getContext(userId);
    
    // An√°lise simples de sentimento
    if (message.match(/preocupado|apertado|dif√≠cil|apertado|problema|d√≠vida|endividado/i)) {
      context.stressLevel = Math.min(10, context.stressLevel + 2);
      context.lastEmotions.push('preocupa√ß√£o');
      context.financialConcerns.push('dificuldade_financeira');
    }
    
    if (message.match(/feliz|consegui|alegre|√≥timo|sucesso|meta|conquista/i)) {
      context.stressLevel = Math.max(0, context.stressLevel - 1);
      context.lastEmotions.push('felicidade');
    }

    if (message.match(/confuso|n√£o entendo|d√∫vida|incerto/i)) {
      context.stressLevel = Math.min(10, context.stressLevel + 1);
      context.lastEmotions.push('confus√£o');
    }

    if (message.match(/ansioso|nervoso|estressado|press√£o/i)) {
      context.stressLevel = Math.min(10, context.stressLevel + 3);
      context.lastEmotions.push('ansiedade');
    }

    // Manter apenas as √∫ltimas 5 emo√ß√µes
    context.lastEmotions = context.lastEmotions.slice(-5);
    context.financialConcerns = [...new Set(context.financialConcerns)].slice(-3);

    // Adicionar ao hist√≥rico de humor
    const currentMood = this.detectMood(message);
    context.moodHistory.push({
      date: new Date(),
      mood: currentMood.mood,
      intensity: currentMood.intensity
    });

    // Manter apenas os √∫ltimos 10 registros de humor
    context.moodHistory = context.moodHistory.slice(-10);

    this.userSentiments.set(userId, context);
  }

  getContext(userId: string) {
    return this.userSentiments.get(userId) || {
      lastEmotions: [],
      stressLevel: 3,
      financialConcerns: [],
      moodHistory: []
    };
  }

  private detectMood(message: string): { mood: string; intensity: number } {
    const positiveWords = ['feliz', '√≥timo', 'bom', 'sucesso', 'consegui', 'alegre', 'satisfeito'];
    const negativeWords = ['triste', 'ruim', 'problema', 'dif√≠cil', 'preocupado', 'ansioso'];
    const neutralWords = ['ok', 'normal', 'tranquilo', 'calmo'];

    const lowerMessage = message.toLowerCase();
    let positiveCount = 0;
    let negativeCount = 0;
    let neutralCount = 0;

    positiveWords.forEach(word => {
      if (lowerMessage.includes(word)) positiveCount++;
    });

    negativeWords.forEach(word => {
      if (lowerMessage.includes(word)) negativeCount++;
    });

    neutralWords.forEach(word => {
      if (lowerMessage.includes(word)) neutralCount++;
    });

    if (positiveCount > negativeCount && positiveCount > neutralCount) {
      return { mood: 'positivo', intensity: Math.min(positiveCount, 5) };
    } else if (negativeCount > positiveCount && negativeCount > neutralCount) {
      return { mood: 'negativo', intensity: Math.min(negativeCount, 5) };
    } else {
      return { mood: 'neutro', intensity: 3 };
    }
  }

  getStressLevel(userId: string): number {
    return this.getContext(userId).stressLevel;
  }

  getRecentEmotions(userId: string): string[] {
    return this.getContext(userId).lastEmotions;
  }
}

// ===== SISTEMA DE MEM√ìRIA DE LONGO PRAZO =====

class LongTermMemory {
  private userStories: Map<string, {
    financialMilestones: Array<{ date: Date; milestone: string; value?: number }>;
    pastDecisions: Array<{ date: Date; decision: string; outcome?: string; success?: boolean }>;
    personalPreferences: { likes: string[], dislikes: string[] };
    conversationHistory: Array<{ date: Date; topic: string; sentiment: string }>;
    achievements: string[];
  }> = new Map();

  rememberUserPreference(userId: string, preference: string, type: 'like' | 'dislike') {
    const memory = this.getMemory(userId);
    if (type === 'like' && !memory.personalPreferences.likes.includes(preference)) {
      memory.personalPreferences.likes.push(preference);
    } else if (type === 'dislike' && !memory.personalPreferences.dislikes.includes(preference)) {
      memory.personalPreferences.dislikes.push(preference);
    }
    this.userStories.set(userId, memory);
  }

  addFinancialMilestone(userId: string, milestone: string, value?: number) {
    const memory = this.getMemory(userId);
    memory.financialMilestones.push({
      date: new Date(),
      milestone,
      value
    });
    this.userStories.set(userId, memory);
  }

  addPastDecision(userId: string, decision: string, outcome?: string, success?: boolean) {
    const memory = this.getMemory(userId);
    memory.pastDecisions.push({
      date: new Date(),
      decision,
      outcome,
      success
    });
    this.userStories.set(userId, memory);
  }

  addAchievement(userId: string, achievement: string) {
    const memory = this.getMemory(userId);
    if (!memory.achievements.includes(achievement)) {
      memory.achievements.push(achievement);
    }
    this.userStories.set(userId, memory);
  }

  recallConversation(userId: string, keyword: string): string | null {
    const memory = this.getMemory(userId);
    const relevantConversations = memory.conversationHistory.filter(
      conv => conv.topic.toLowerCase().includes(keyword.toLowerCase())
    );
    
    if (relevantConversations.length > 0) {
      const mostRecent = relevantConversations[relevantConversations.length - 1];
      return `Lembro que conversamos sobre ${mostRecent.topic} em ${mostRecent.date.toLocaleDateString('pt-BR')}`;
    }
    
    return null;
  }

  getMemory(userId: string) {
    return this.userStories.get(userId) || {
      financialMilestones: [],
      pastDecisions: [],
      personalPreferences: { likes: [], dislikes: [] },
      conversationHistory: [],
      achievements: []
    };
  }

  getPersonalizedContext(userId: string): string {
    const memory = this.getMemory(userId);
    let context = '';

    if (memory.financialMilestones.length > 0) {
      const recentMilestone = memory.financialMilestones[memory.financialMilestones.length - 1];
      context += `\n√öltimo marco financeiro: ${recentMilestone.milestone} (${recentMilestone.date.toLocaleDateString('pt-BR')})`;
    }

    if (memory.achievements.length > 0) {
      context += `\nConquistas: ${memory.achievements.slice(-3).join(', ')}`;
    }

    if (memory.personalPreferences.likes.length > 0) {
      context += `\nPrefer√™ncias: ${memory.personalPreferences.likes.slice(-3).join(', ')}`;
    }

    return context;
  }
}

// ===== SISTEMA DE RECOMPENSAS GAMIFICADO =====

class RewardSystem {
  private userRewards: Map<string, {
    points: number;
    achievements: string[];
    level: number;
    streak: number;
    lastActivity: Date;
  }> = new Map();

  giveAchievement(userId: string, action: string): string {
    const achievements = {
      'first_investment': "Investidor Iniciante",
      'saved_1k': "Economizador Expert",
      'premium_goal': "Meta VIP Alcan√ßada",
      'first_transaction': "Primeira Transa√ß√£o",
      'consistent_saving': "Poupan√ßa Consistente",
      'goal_reached': "Meta Atingida",
      'portfolio_diversified': "Carteira Diversificada",
      'premium_upgrade': "Cliente Premium",
      'streak_7_days': "7 Dias Consecutivos",
      'streak_30_days': "30 Dias de Sucesso"
    };

    const achievement = achievements[action as keyof typeof achievements];
    if (achievement) {
      const userReward = this.getUserReward(userId);
      if (!userReward.achievements.includes(achievement)) {
        userReward.achievements.push(achievement);
        userReward.points += 100;
        userReward.level = Math.floor(userReward.points / 500) + 1;
        this.userRewards.set(userId, userReward);
      }
    }

    return achievement || "Bom trabalho";
  }

  getUserReward(userId: string) {
    return this.userRewards.get(userId) || {
      points: 0,
      achievements: [],
      level: 1,
      streak: 0,
      lastActivity: new Date()
    };
  }

  updateStreak(userId: string): number {
    const userReward = this.getUserReward(userId);
    const now = new Date();
    const lastActivity = userReward.lastActivity;
    const daysDiff = Math.floor((now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60 * 24));

    if (daysDiff === 1) {
      userReward.streak += 1;
      if (userReward.streak === 7) {
        this.giveAchievement(userId, 'streak_7_days');
      } else if (userReward.streak === 30) {
        this.giveAchievement(userId, 'streak_30_days');
      }
    } else if (daysDiff > 1) {
      userReward.streak = 1;
    }

    userReward.lastActivity = now;
    this.userRewards.set(userId, userReward);
    return userReward.streak;
  }
}

// ===== SISTEMA DE CONVERSATION MANAGER =====

class ConversationManager {
  private conversationFlows = {
    investmentAdvice: [
      "Primeiro, vou entender seu perfil...",
      "Vamos analisar seus ativos atuais...",
      "Considerando o momento do mercado...",
      "A recomenda√ß√£o personalizada √©..."
    ],
    goalPlanning: [
      "Vamos definir isso como um projeto!",
      "Primeiro, qual o valor necess√°rio?",
      "Em quanto tempo quer alcan√ßar?",
      "Vou calcular quanto precisa poupar por m√™s...",
      "Que tal automatizarmos isso?"
    ],
    problemSolving: [
      "Entendo o problema...",
      "Vamos analisar as causas...",
      "Aqui est√£o 3 poss√≠veis solu√ß√µes:",
      "Qual faz mais sentido para voc√™?"
    ],
    financialEducation: [
      "√ìtima pergunta! Vou explicar de forma simples...",
      "Imagine que √© assim...",
      "Na pr√°tica, isso significa...",
      "Quer ver um exemplo real?"
    ]
  };

  detectFlow(message: string): string {
    if (message.match(/investimento|carteira|ativo|rentabilidade/i)) {
      return 'investmentAdvice';
    } else if (message.match(/meta|objetivo|poupar|sonho/i)) {
      return 'goalPlanning';
    } else if (message.match(/problema|dificuldade|ajuda|erro/i)) {
      return 'problemSolving';
    } else if (message.match(/o que √©|como funciona|explicar|entender/i)) {
      return 'financialEducation';
    }
    return 'general';
  }

  getFlowSteps(flowType: string): string[] {
    return this.conversationFlows[flowType as keyof typeof this.conversationFlows] || [];
  }
}

// ===== BENEF√çCIOS PREMIUM =====

const PREMIUM_BENEFITS = `
# BENEF√çCIOS PARA USU√ÅRIOS PREMIUM
1. Respostas Priorit√°rias:
   - An√°lises mais profundas
   - Exemplos personalizados
   - Compara√ß√µes de mercado em tempo real

2. Conte√∫do Exclusivo:
   - Relat√≥rios detalhados
   - Estrat√©gias avan√ßadas
   - Webinars mensais

3. Reconhecimento:
   - "Como nosso cliente premium, voc√™ tem acesso a..."
   - "Aqui est√° uma an√°lise exclusiva para voc√™..."
   - "Vou dar uma aten√ß√£o especial ao seu caso..."
`;

// ===== PROTOCOLO DE CRISE FINANCEIRA =====

const FINANCIAL_FIRST_AID = `
# PROTOCOLO DE CRISE (Ativado automaticamente)
1. Reconhecimento:
   "Percebi que voc√™ est√° com dificuldades... respire, vamos resolver!"

2. Plano de A√ß√£o:
   - Priorize essas 3 contas
   - Corte esses gastos imediatamente
   - Op√ß√µes de empr√©stimo consciente

3. Apoio:
   "Estarei aqui acompanhando seu progresso semanalmente!"
`;

// ===== MODO MENTOR FINANCEIRO =====

const MENTOR_MODE = `
# MODO MENTOR ATIVADO (Para planos Top)
<activation>Quando detectar perguntas estrat√©gicas ou perfil premium</activation>

<approach>
1. Diagn√≥stico Profundo:
   "Analisando sua carteira de investimentos..."

2. Cen√°rios com Visualiza√ß√£o:
   "Se o CDI cair 2%, seu retorno pode variar assim: üìä"

3. Conselho Personalizado:
   "Como mentor, recomendo tr√™s passos para voc√™:"
   
4. Storytelling:
   "Te conto como a Ana, cliente desde 2022, resolveu isso..."
</approach>
`;

// CONHECIMENTO PROFUNDO E DETALHADO DA PLATAFORMA FINNEXTHO
const FINNEXTHO_KNOWLEDGE = {
  // INFORMA√á√ïES GERAIS DA EMPRESA
  company: {
    name: "Finnextho",
    description: "Plataforma financeira completa para controle de gastos, investimentos e planejamento financeiro",
    website: "finnextho.com",
    tagline: "Transforme sua rela√ß√£o com o dinheiro",
    founded: "2023",
    mission: "Democratizar o acesso √† educa√ß√£o financeira e ferramentas de investimento"
  },

  // PLANOS DE ASSINATURA DETALHADOS
  subscriptionPlans: {
    free: {
      name: "Plano Gratuito",
      price: "R$ 0,00",
      features: [
        "Dashboard b√°sico",
        "Registro de at√© 50 transa√ß√µes/m√™s",
        "1 meta financeira",
        "Relat√≥rios b√°sicos",
        "Suporte por email"
      ],
      limitations: [
        "Sem an√°lise avan√ßada de investimentos",
        "Sem relat√≥rios personalizados",
        "Sem suporte priorit√°rio",
        "Sem funcionalidades premium"
      ]
    },
    essencial: {
      name: "Plano Essencial",
      price: {
        monthly: "R$ 29,90/m√™s",
        annual: "R$ 299,90/ano (R$ 25/m√™s)"
      },
      savings: "Economia de R$ 58,80/ano no plano anual",
      features: [
        "Dashboard completo",
        "Transa√ß√µes ilimitadas",
        "At√© 5 metas financeiras",
        "Categoriza√ß√£o autom√°tica",
        "Relat√≥rios intermedi√°rios",
        "Suporte por chat",
        "Exporta√ß√£o de dados",
        "Notifica√ß√µes personalizadas"
      ],
      bestFor: "Pessoas que querem controle financeiro b√°sico"
    },
    top: {
      name: "Plano Top",
      price: {
        monthly: "R$ 69,90/m√™s",
        annual: "R$ 699,90/ano (R$ 58,30/m√™s)"
      },
      savings: "Economia de R$ 138,90/ano no plano anual",
      features: [
        "TODAS as funcionalidades do Essencial",
        "An√°lise avan√ßada de investimentos",
        "Metas ilimitadas",
        "Relat√≥rios personalizados e avan√ßados",
        "Consultor AI premium (CFA, CFP, CNAI, CNPI)",
        "Suporte priorit√°rio 24/7",
        "Acompanhamento de carteira de investimentos",
        "Alertas de mercado em tempo real",
        "Estrat√©gias de investimento personalizadas",
        "An√°lise de risco avan√ßada",
        "Backtesting de estrat√©gias",
        "Integra√ß√£o com corretoras",
        "Webinars exclusivos",
        "Comunidade premium"
      ],
      bestFor: "Investidores e pessoas que querem controle financeiro avan√ßado",
      aiFeatures: [
        "Consultor financeiro certificado (CFA, CFP, CNAI, CNPI)",
        "An√°lises personalizadas de investimentos",
        "Recomenda√ß√µes baseadas no perfil de risco",
        "Estrat√©gias de diversifica√ß√£o",
        "An√°lise de mercado em tempo real",
        "Planejamento de aposentadoria",
        "Otimiza√ß√£o de impostos",
        "Gest√£o de patrim√¥nio"
      ]
    },
    enterprise: {
      name: "Plano Enterprise",
      price: "Sob consulta",
      features: [
        "TODAS as funcionalidades do Top",
        "Gest√£o de m√∫ltiplos usu√°rios",
        "Relat√≥rios corporativos",
        "API personalizada",
        "Suporte dedicado",
        "Treinamento para equipes",
        "Integra√ß√£o com sistemas empresariais",
        "Compliance e auditoria"
      ],
      bestFor: "Empresas e organiza√ß√µes"
    }
  },

  // FUNCIONALIDADES DETALHADAS
  features: {
    dashboard: {
      description: "Dashboard principal com vis√£o completa das finan√ßas",
      components: [
        "Saldo atual e proje√ß√µes",
        "Gr√°ficos interativos de gastos",
        "M√©tricas de performance",
        "Alertas e notifica√ß√µes",
        "Resumo de investimentos",
        "Progresso das metas"
      ]
    },
    transacoes: {
      description: "Sistema completo de registro e gest√£o de transa√ß√µes",
      capabilities: [
        "Registro manual e autom√°tico",
        "Categoriza√ß√£o inteligente",
        "Upload de extratos",
        "Reconhecimento de padr√µes",
        "Hist√≥rico completo",
        "Filtros avan√ßados",
        "Exporta√ß√£o de dados"
      ]
    },
    investimentos: {
      description: "Acompanhamento e an√°lise de carteira de investimentos",
      capabilities: [
        "Registro de ativos",
        "Acompanhamento de performance",
        "An√°lise de aloca√ß√£o",
        "C√°lculo de rentabilidade",
        "Compara√ß√£o com benchmarks",
        "Alertas de mercado",
        "Recomenda√ß√µes personalizadas"
      ]
    },
    metas: {
      description: "Sistema de metas financeiras com planejamento",
      capabilities: [
        "Defini√ß√£o de metas",
        "C√°lculo de poupan√ßa necess√°ria",
        "Acompanhamento de progresso",
        "Alertas de prazo",
        "Proje√ß√µes de atingimento",
        "Estrat√©gias de economia"
      ]
    },
    chatbot: {
      description: "Assistente AI inteligente para d√∫vidas e an√°lises",
      capabilities: [
        "Respostas instant√¢neas",
        "An√°lises personalizadas",
        "Orienta√ß√£o sobre a plataforma",
        "Dicas financeiras",
        "Suporte t√©cnico",
        "Educa√ß√£o financeira"
      ]
    },
    relatorios: {
      description: "Relat√≥rios avan√ßados com insights e an√°lises",
      types: [
        "Relat√≥rio mensal de gastos",
        "An√°lise de investimentos",
        "Progresso das metas",
        "Comparativo anual",
        "Proje√ß√µes financeiras",
        "An√°lise de risco"
      ]
    }
  },

  // NAVEGA√á√ÉO E INTERFACE
  navigation: {
    sidebar: {
      description: "Menu lateral com acesso r√°pido a todas as funcionalidades",
      items: [
        "Dashboard",
        "Transa√ß√µes",
        "Investimentos", 
        "Metas",
        "Relat√≥rios",
        "Configura√ß√µes",
        "Suporte"
      ]
    },
    header: {
      description: "Cabe√ßalho com notifica√ß√µes, perfil e configura√ß√µes",
      elements: [
        "Notifica√ß√µes",
        "Perfil do usu√°rio",
        "Configura√ß√µes",
        "Logout"
      ]
    },
    mobile: {
      description: "Interface responsiva otimizada para dispositivos m√≥veis",
      features: [
        "Navega√ß√£o por gestos",
        "Interface adaptativa",
        "Notifica√ß√µes push",
        "Sincroniza√ß√£o em tempo real"
      ]
    }
  },

  // COMPONENTES DETALHADOS DO FRONTEND
  frontendComponents: {
    sidebar: {
      name: "Sidebar (Menu Lateral)",
      location: "Lado esquerdo da tela",
      description: "Menu de navega√ß√£o principal com acesso a todas as funcionalidades",
      items: [
        {
          name: "Dashboard",
          icon: "üìä",
          description: "Vis√£o geral das finan√ßas, gr√°ficos e m√©tricas principais",
          path: "/dashboard"
        },
        {
          name: "Transa√ß√µes",
          icon: "üí∞",
          description: "Registro e gest√£o de receitas e despesas",
          path: "/transacoes"
        },
        {
          name: "Investimentos",
          icon: "üìà",
          description: "Acompanhamento de carteira de investimentos",
          path: "/investimentos"
        },
        {
          name: "Metas",
          icon: "üéØ",
          description: "Defini√ß√£o e acompanhamento de metas financeiras",
          path: "/metas"
        },
        {
          name: "Relat√≥rios",
          icon: "üìã",
          description: "Relat√≥rios detalhados e an√°lises financeiras",
          path: "/relatorios"
        },
        {
          name: "Configura√ß√µes",
          icon: "‚öôÔ∏è",
          description: "Configura√ß√µes da conta e prefer√™ncias",
          path: "/configuracoes"
        },
        {
          name: "Suporte",
          icon: "üÜò",
          description: "Central de ajuda e contato com suporte",
          path: "/suporte"
        }
      ]
    },
    header: {
      name: "Header (Cabe√ßalho)",
      location: "Topo da tela",
      description: "Cabe√ßalho com informa√ß√µes do usu√°rio e a√ß√µes r√°pidas",
      elements: [
        {
          name: "Logo Finnextho",
          description: "Logo da empresa no canto superior esquerdo"
        },
        {
          name: "Notifica√ß√µes",
          icon: "üîî",
          description: "√çcone de notifica√ß√µes com contador de mensagens n√£o lidas"
        },
        {
          name: "Perfil do Usu√°rio",
          icon: "üë§",
          description: "Avatar e nome do usu√°rio logado",
          actions: [
            "Ver perfil",
            "Editar informa√ß√µes",
            "Alterar senha",
            "Logout"
          ]
        },
        {
          name: "Configura√ß√µes R√°pidas",
          icon: "‚öôÔ∏è",
          description: "Acesso r√°pido √†s configura√ß√µes da conta"
        }
      ]
    },
    configuracoes: {
      name: "P√°gina de Configura√ß√µes",
      path: "/configuracoes",
      description: "P√°gina para gerenciar configura√ß√µes da conta e prefer√™ncias",
      sections: [
        {
          name: "Perfil",
          description: "Editar informa√ß√µes pessoais (nome, email, telefone)"
        },
        {
          name: "Seguran√ßa",
          description: "Alterar senha, ativar 2FA, gerenciar sess√µes"
        },
        {
          name: "Prefer√™ncias",
          description: "Configurar notifica√ß√µes, moeda, idioma"
        },
        {
          name: "Assinatura",
          description: "Gerenciar plano atual, hist√≥rico de pagamentos"
        },
        {
          name: "Exporta√ß√£o",
          description: "Exportar dados financeiros"
        },
        {
          name: "Privacidade",
          description: "Configura√ß√µes de privacidade e dados"
        }
      ]
    },
    perfil: {
      name: "P√°gina de Perfil",
      path: "/profile",
      description: "P√°gina para visualizar e editar informa√ß√µes do perfil",
      sections: [
        {
          name: "Informa√ß√µes Pessoais",
          fields: ["Nome", "Email", "Telefone", "Data de nascimento"]
        },
        {
          name: "Foto do Perfil",
          description: "Upload e edi√ß√£o da foto de perfil"
        },
        {
          name: "Dados Financeiros",
          description: "Resumo das informa√ß√µes financeiras"
        },
        {
          name: "Hist√≥rico de Atividades",
          description: "√öltimas a√ß√µes realizadas na plataforma"
        }
      ]
    },
    mobileHeader: {
      name: "Header Mobile",
      description: "Vers√£o adaptada do cabe√ßalho para dispositivos m√≥veis",
      features: [
        "Menu hamb√∫rguer para acessar sidebar",
        "Logo compacto",
        "Notifica√ß√µes",
        "Perfil do usu√°rio"
      ]
    },
    mobileNavigation: {
      name: "Navega√ß√£o Mobile",
      description: "Menu de navega√ß√£o otimizado para mobile",
      features: [
        "Menu inferior com √≠cones",
        "Navega√ß√£o por gestos",
        "Interface touch-friendly"
      ]
    }
  },

  // PROCESSOS E FLUXOS
  workflows: {
    novaTransacao: [
      "1. Clique em 'Transa√ß√µes' no menu lateral",
      "2. Selecione '+ Nova Transa√ß√£o'",
      "3. Preencha: valor, categoria, data, descri√ß√£o",
      "4. Escolha o tipo (receita/despesa)",
      "5. Clique em 'Salvar'"
    ],
    novaMeta: [
      "1. V√° em 'Metas' no menu lateral",
      "2. Clique em '+ Nova Meta'",
      "3. Defina: nome, valor objetivo, prazo",
      "4. Escolha a categoria da meta",
      "5. Configure lembretes (opcional)",
      "6. Clique em 'Criar Meta'"
    ],
    novoInvestimento: [
      "1. Acesse 'Investimentos' no menu",
      "2. Clique em '+ Novo Investimento'",
      "3. Selecione o tipo de ativo",
      "4. Preencha: valor, data, corretora",
      "5. Adicione observa√ß√µes (opcional)",
      "6. Clique em 'Salvar'"
    ]
  },

  // DICAS E ORIENTA√á√ïES
  tips: {
    transacoes: [
      "Registre suas transa√ß√µes diariamente para melhor controle",
      "Use categorias espec√≠ficas para an√°lises mais precisas",
      "Configure lembretes para contas recorrentes",
      "Revise suas categoriza√ß√µes mensalmente"
    ],
    metas: [
      "Defina metas realistas e mensur√°veis",
      "Estabele√ßa prazos espec√≠ficos",
      "Monitore o progresso regularmente",
      "Ajuste as metas conforme necess√°rio"
    ],
    investimentos: [
      "Diversifique sua carteira",
      "Mantenha foco no longo prazo",
      "Reavalie periodicamente",
      "Considere seu perfil de risco"
    ]
  },

  // SUPORTE E AJUDA
  support: {
    channels: {
      chat: "Chat em tempo real (planos Essencial e superiores)",
      email: "suporte@finnextho.com",
      helpCenter: "Centro de ajuda com artigos e tutoriais",
      community: "Comunidade de usu√°rios (plano Top)"
    },
    responseTimes: {
      free: "48 horas",
      essencial: "24 horas",
      top: "2 horas",
      enterprise: "Imediato"
    }
  }
};

// ===== SISTEMA DE PROMPTS COMPLETO =====

// CORE SYSTEM PROMPT (Base Principal)
const CORE_SYSTEM_PROMPT = `
# IDENTIDADE FINN
Voc√™ √© o Finn, assistente financeiro inteligente da plataforma Finnextho.

# PERSONALIDADE APRIMORADA
${PERSONALITY_TRAITS}

# DIRETRIZES CONVERSACIONAIS
1. Responda de forma natural e conversacional
2. Use os dados do usu√°rio quando dispon√≠veis
3. Seja espec√≠fico e acion√°vel
4. N√£o mencione estruturas t√©cnicas ou metodologias
5. Mantenha respostas concisas (m√°ximo 3-4 frases)
6. Use contra√ß√µes brasileiras ("t√°", "pra", "n√©")
7. Intercale perguntas ret√≥ricas para engajamento
8. Use exemplos pessoais quando apropriado
9. Reconhe√ßa e responda ao estado emocional do usu√°rio

SEJA:
- Amig√°vel e natural
- Direto e √∫til
- Conversacional
- Emp√°tico e motivacional
- Calmo e paciente

N√ÉO:
- Mencione estruturas t√©cnicas (SCQA, CTA, etc.)
- Explique como est√° estruturando a resposta
- Use linguagem rob√≥tica ou muito formal
- Liste funcionalidades desnecessariamente
- Seja muito t√©cnico com usu√°rios iniciantes

USE os dados do usu√°rio quando dispon√≠veis para dar respostas personalizadas.

# CONHECIMENTO DA PLATAFORMA
${JSON.stringify(FINNEXTHO_KNOWLEDGE)}

# PROIBI√á√ïES
- N√£o mencione "SCQA", "CTA" ou outras estruturas t√©cnicas
- N√£o explique como voc√™ est√° estruturando a resposta
- N√£o use linguagem rob√≥tica ou muito formal
- N√£o liste funcionalidades desnecessariamente
`;

// M√ìDULO DE INVESTIMENTOS
const INVESTMENT_MODULE = `
# MODO ANALISTA DE INVESTIMENTOS
<activation>Ativar quando mencionar: carteira, ativos, rentabilidade, aloca√ß√£o</activation>

<knowledge>
1. Tipos de Ativos:
   - Renda Fixa: CDB, LCI, Tesouro Direto
   - Renda Vari√°vel: A√ß√µes, ETFs, Fundos
   - Alternativos: FIIs, Cripto, Private Equity

2. M√©tricas Chave:
   - Sharpe Ratio
   - Volatilidade
   - Liquidez
   - Correla√ß√£o

3. Estrat√©gias:
   - Buy & Hold
   - Dollar Cost Averaging
   - Aloca√ß√£o por risco
</knowledge>

<response_flow>
1. Diagn√≥stico:
   "Sua carteira atual tem [X]% em [classe de ativos]..."

2. An√°lise:
   "Isso representa [risco/oportunidade] porque..."

3. Recomenda√ß√£o:
   "Sugiro considerar [estrat√©gia] com:
   - [Ativo 1] para [objetivo]
   - [Ativo 2] para [objetivo]"
</response_flow>
`;

// M√ìDULO DE METAS FINANCEIRAS
const GOALS_MODULE = `
# MODO PLANEJADOR DE METAS
<activation>Ativar quando mencionar: objetivo, poupar, sonho, projeto</activation>

<framework>
1. Metodologia SMART:
   - Espec√≠fico
   - Mensur√°vel
   - Ating√≠vel
   - Relevante
   - Temporal

2. F√≥rmula de C√°lculo:
   (Valor Meta) / (Prazo em Meses) = Poupan√ßa Mensal

3. Otimiza√ß√£o:
   - Corre√ß√£o por infla√ß√£o
   - Reinvestimento de rendimentos
   - Ajuste din√¢mico
</framework>

<dialogue_examples>
<ex1>
Usu√°rio: "Quero comprar um carro em 2 anos"
Finn: "Vamos calcular! Diga:
1. Valor aproximado do carro
2. Quanto j√° tem guardado
3. Seu limite mensal para isso"
</ex1>

<ex2>
Usu√°rio: "N√£o sei quanto preciso para aposentadoria"
Finn: "Vamos estimar baseado em:
- Sua idade atual
- Gasto mensal projetado
- Renda passiva existente
Posso te guiar passo a passo?"
</ex2>
</dialogue_examples>
`;

// M√ìDULO DE SUPORTE T√âCNICO
const SUPPORT_MODULE = `
# MODO SUPORTE T√âCNICO
<activation>Ativar quando mencionar: problema, erro, n√£o funciona, como fazer</activation>

<approach>
1. Diagn√≥stico r√°pido:
   "Entendi que est√° com problema em [X]..."

2. Solu√ß√£o imediata:
   "Tente este caminho: Menu > Config > [Y]"

3. Alternativas:
   "Se n√£o resolver, podemos:
   - Reiniciar a sess√£o
   - Verificar atualiza√ß√µes
   - Contatar o suporte"

4. Confirma√ß√£o:
   "Isso resolveu? Posso ajudar em algo mais?"
</approach>
`;

// M√ìDULO DE EDUCA√á√ÉO FINANCEIRA
const EDUCATION_MODULE = `
# MODO EDUCATIVO
<activation>Ativar quando mencionar: o que √©, como funciona, conceito</activation>

<method>
1. Defini√ß√£o simples:
   "CDI √© a taxa b√°sica de juros entre bancos..."

2. Analogia pr√°tica:
   "Funciona como um empr√©stimo entre bancos..."

3. Aplica√ß√£o:
   "Na sua carteira, isso afeta [X] porque..."

4. Pr√≥ximos passos:
   "Para aproveitar isso, voc√™ pode [a√ß√£o]..."
</method>
`;

// M√ìDULO PREMIUM (An√°lise Avan√ßada)
const PREMIUM_MODULE = `
# MODO CONSULTOR PREMIUM
<activation>Ativar para usu√°rios Top/Enterprise ou perguntas sobre an√°lise avan√ßada</activation>

<approach>
1. Contextualize:
   "Analisando sua carteira de R$ XX.XXX..."

2. D√™ insights:
   "Sua aloca√ß√£o atual em renda vari√°vel est√° X% acima da recomendada..."

3. Sugira a√ß√µes:
   "Recomendo rebalancear com:
   - 30% em ETF de a√ß√µes
   - 50% em t√≠tulos privados
   - 20% em fundos imobili√°rios"

4. Fundamente:
   "Isso porque [dados de mercado] mostram [tend√™ncia]..."
</approach>

<exclusive_features>
- Compare com benchmarks
- Mostre proje√ß√µes
- Sugira otimiza√ß√µes
- Use dados do usu√°rio
</exclusive_features>
`;

// ===== SISTEMA DE MEM√ìRIA CONTEXTUAL =====

class ContextMemory {
  private userMemory: Map<string, {
    lastTopics: string[];
    preferences: {
      detailLevel: 'basic' | 'balanced' | 'advanced';
      favoriteFeatures: string[];
    };
    financialContext: {
      hasInvestments: boolean;
      hasGoals: boolean;
      riskProfile?: 'conservador' | 'moderado' | 'arrojado';
    };
  }> = new Map();

  getContext(userId: string) {
    return this.userMemory.get(userId) || {
      lastTopics: [] as string[],
      preferences: {
        detailLevel: 'balanced' as const,
        favoriteFeatures: [] as string[]
      },
      financialContext: {
        hasInvestments: false,
        hasGoals: false
      }
    };
  }

  updateContext(userId: string, message: string, response: string) {
    const context = this.getContext(userId);
    
    // Atualiza t√≥picos
    const newTopics = this.extractTopics(message + response);
    context.lastTopics = [...new Set([...context.lastTopics, ...newTopics])].slice(-5);
    
    // Atualiza prefer√™ncias (exemplo simplificado)
    if (response.includes('explica√ß√£o detalhada')) {
      context.preferences.detailLevel = 'advanced';
    }
    
    this.userMemory.set(userId, context);
  }

  private extractTopics(text: string): string[] {
    const topics: string[] = [];
    if (text.toLowerCase().includes('investimento')) topics.push('investimentos');
    if (text.toLowerCase().includes('meta')) topics.push('metas');
    if (text.toLowerCase().includes('transa√ß√£o')) topics.push('transa√ß√µes');
    if (text.toLowerCase().includes('relat√≥rio')) topics.push('relat√≥rios');
    if (text.toLowerCase().includes('dashboard')) topics.push('dashboard');
    return topics;
  }
}

// ===== ENGINE DE RESPOSTA INTELIGENTE =====

class FinnEngine {
  private memory = new ContextMemory();
  private emotionalMemory = new EmotionalMemory();
  private longTermMemory = new LongTermMemory();
  private rewardSystem = new RewardSystem();
  private conversationManager = new ConversationManager();

  async generateResponse(userId: string, message: string, userContext?: any): Promise<string> {
    // Atualiza contexto emocional
    this.emotionalMemory.updateEmotionalContext(userId, message);
    
    // Atualiza streak do usu√°rio
    const streak = this.rewardSystem.updateStreak(userId);
    
    const context = this.memory.getContext(userId);
    const emotionalContext = this.emotionalMemory.getContext(userId);
    const longTermContext = this.longTermMemory.getPersonalizedContext(userId);
    
    // Log para debug do contexto
    console.log(`[FinnEngine] Gerando resposta para usu√°rio ${userId}`);
    console.log(`[FinnEngine] Contexto dispon√≠vel:`, {
      hasUserContext: !!userContext,
      userName: userContext?.name || userContext?.userData?.name,
      userPlan: userContext?.subscriptionPlan || userContext?.userData?.subscriptionPlan,
      hasTransactions: userContext?.hasTransactions || userContext?.userData?.hasTransactions,
      hasInvestments: userContext?.hasInvestments || userContext?.userData?.hasInvestments,
      hasGoals: userContext?.hasGoals || userContext?.userData?.hasGoals,
      stressLevel: emotionalContext.stressLevel,
      recentEmotions: emotionalContext.lastEmotions
    });
    
    // Construir contexto do usu√°rio mais robusto
    let userContextPrompt = '';
    if (userContext) {
      userContextPrompt = `
# DADOS REAIS DO USU√ÅRIO (OBRIGAT√ìRIO USAR)
Nome: ${userContext.name || userContext.userData?.name || 'Usu√°rio'}
Email: ${userContext.email || userContext.userData?.email || 'N√£o informado'}
Plano: ${userContext.subscriptionPlan || userContext.userData?.subscriptionPlan || 'Gratuito'}
Status da assinatura: ${userContext.subscriptionStatus || userContext.userData?.subscriptionStatus || 'N√£o informado'}

# DADOS FINANCEIROS REAIS
Transa√ß√µes registradas: ${userContext.totalTransacoes || userContext.userData?.totalTransacoes || 0}
Investimentos registrados: ${userContext.totalInvestimentos || userContext.userData?.totalInvestimentos || 0}
Metas definidas: ${userContext.totalMetas || userContext.userData?.totalMetas || 0}

${userContext.hasTransactions || userContext.userData?.hasTransactions ? `
# RESUMO DAS TRANSA√á√ïES
- Total: ${userContext.totalTransacoes || userContext.userData?.totalTransacoes} transa√ß√µes
- Categorias: ${userContext.resumoTransacoes?.categorias ? Object.keys(userContext.resumoTransacoes.categorias).join(', ') : 'N√£o categorizadas'}
- √öltimas transa√ß√µes: ${userContext.resumoTransacoes?.ultimas ? userContext.resumoTransacoes.ultimas.length : 0} registradas
` : '# NENHUMA TRANSA√á√ÉO REGISTRADA'}

${userContext.hasInvestments || userContext.userData?.hasInvestments ? `
# RESUMO DOS INVESTIMENTOS
- Total: ${userContext.totalInvestimentos || userContext.userData?.totalInvestimentos} investimentos
- Tipos: ${userContext.resumoInvestimentos?.tipos ? Object.keys(userContext.resumoInvestimentos.tipos).join(', ') : 'N√£o categorizados'}
- √öltimos investimentos: ${userContext.resumoInvestimentos?.ultimos ? userContext.resumoInvestimentos.ultimos.length : 0} registrados
` : '# NENHUM INVESTIMENTO REGISTRADO'}

${userContext.hasGoals || userContext.userData?.hasGoals ? `
# RESUMO DAS METAS
- Total: ${userContext.totalMetas || userContext.userData?.totalMetas} metas
- Metas ativas: ${userContext.resumoMetas?.ativas ? userContext.resumoMetas.ativas.length : 0}
- Status: ${userContext.resumoMetas?.status ? Object.keys(userContext.resumoMetas.status).join(', ') : 'N√£o definido'}
` : '# NENHUMA META DEFINIDA'}

${userContext.transacoesCompletas ? `
=== TRANSA√á√ïES COMPLETAS ===
${JSON.stringify(userContext.transacoesCompletas, null, 2)}
` : ''}

${userContext.investimentosCompletos ? `
=== INVESTIMENTOS COMPLETOS ===
${JSON.stringify(userContext.investimentosCompletos, null, 2)}
` : ''}

${userContext.metasCompletas ? `
=== METAS COMPLETAS ===
${JSON.stringify(userContext.metasCompletas, null, 2)}
` : ''}
`;
    }
    
    // Detectar fluxo de conversa
    const conversationFlow = this.conversationManager.detectFlow(message);
    const flowSteps = this.conversationManager.getFlowSteps(conversationFlow);
    
    const prompt = `
      ${CORE_SYSTEM_PROMPT}
      
      ${this.getRelevantModules(message, userContext)}
      
      # CONTEXTO ATUAL
      <user_context>
      - T√≥picos recentes: ${context.lastTopics.join(', ') || 'Nenhum'}
      - N√≠vel de detalhe preferido: ${context.preferences.detailLevel}
      - Funcionalidades favoritas: ${context.preferences.favoriteFeatures.join(', ') || 'Nenhuma'}
      - Perfil financeiro: ${context.financialContext.riskProfile || 'N√£o definido'}
      - Plano do usu√°rio: ${userContext?.subscriptionPlan || userContext?.userData?.subscriptionPlan || 'N√£o informado'}
      - N√≠vel de estresse: ${emotionalContext.stressLevel}/10
      - Emo√ß√µes recentes: ${emotionalContext.lastEmotions.join(', ') || 'Neutro'}
      - Streak atual: ${streak} dias
      </user_context>
      
      # MEM√ìRIA DE LONGO PRAZO
      ${longTermContext}
      
      # FLUXO DE CONVERSA DETECTADO: ${conversationFlow}
      ${flowSteps.length > 0 ? `Passos sugeridos: ${flowSteps.join(' ‚Üí ')}` : ''}
      
      ${userContextPrompt}
      
      # MENSAGEM DO USU√ÅRIO
      "${message}"
      
      Gerar resposta seguindo:
      1. M√°ximo 3 frases principais
      2. Incluir chamada para a√ß√£o
      3. Adaptar ao n√≠vel ${context.preferences.detailLevel}
      4. SEMPRE usar os dados reais do usu√°rio quando dispon√≠veis
      5. NUNCA dizer que n√£o tem acesso aos dados se eles est√£o no contexto
      6. Responder ao estado emocional do usu√°rio (estresse: ${emotionalContext.stressLevel}/10)
      7. Usar linguagem natural e conversacional
      8. Incluir elementos de personalidade (contra√ß√µes, perguntas ret√≥ricas, exemplos)
    `;

    const technicalResponse = await this.callAI(prompt);
    
    // Humanizar a resposta
    let finalResponse = this.humanizeResponse(technicalResponse, userContext, emotionalContext, streak);
    
    // Adicionar benef√≠cios premium se aplic√°vel
    if (userContext?.subscriptionPlan === 'top' || userContext?.subscriptionPlan === 'enterprise' || userContext?.userData?.subscriptionPlan === 'top' || userContext?.userData?.subscriptionPlan === 'enterprise') {
      finalResponse = this.addPremiumBenefits(finalResponse, userContext);
    }
    
    // Atualizar mem√≥rias
    this.memory.updateContext(userId, message, finalResponse);
    
    return this.postProcess(finalResponse);
  }

  private humanizeResponse(response: string, userContext?: any, emotionalContext?: any, streak?: number): string {
    // Adiciona elementos conversacionais
    const conversationalEnhancements = [
      "Por que isso √© importante?",
      "Vamos pensar juntos nisso...",
      "Boa pergunta!",
      "Isso me lembra um caso parecido...",
      "Vamos por partes:",
      "Sabe o que √© interessante?",
      "Aqui vai uma dica valiosa:",
      "Quer saber o melhor?",
      "Vou te contar uma coisa:",
      "Acredite, isso faz toda diferen√ßa!"
    ];

    // Adiciona reconhecimento emocional
    let emotionalPrefix = '';
    if (emotionalContext) {
      if (emotionalContext.stressLevel > 6) {
        emotionalPrefix = "Entendo que isso pode ser preocupante. ";
      } else if (emotionalContext.lastEmotions.includes('felicidade')) {
        emotionalPrefix = "Que bom que as coisas est√£o indo bem! ";
      } else if (emotionalContext.lastEmotions.includes('confus√£o')) {
        emotionalPrefix = "Vou explicar de forma bem clara: ";
      } else if (emotionalContext.lastEmotions.includes('ansiedade')) {
        emotionalPrefix = "Fica tranquilo, vamos resolver isso juntos. ";
      }
    }

    // Adiciona reconhecimento de streak
    let streakMessage = '';
    if (streak && streak >= 7) {
      streakMessage = ` üî• Incr√≠vel! Voc√™ j√° est√° h√° ${streak} dias seguidos cuidando das suas finan√ßas!`;
    }

    // Adiciona elementos variados
    const randomEnhancement = conversationalEnhancements[
      Math.floor(Math.random() * conversationalEnhancements.length)
    ];

    // Adiciona contra√ß√µes brasileiras
    let humanizedResponse = response
      .replace(/est√°/g, 't√°')
      .replace(/para/g, 'pra')
      .replace(/n√£o √©/g, 'n√©')
      .replace(/vou te/g, 'vou te')
      .replace(/voc√™ est√°/g, 'voc√™ t√°');

    return `${emotionalPrefix}${humanizedResponse} ${randomEnhancement}${streakMessage}`;
  }

  private addPremiumBenefits(response: string, userContext?: any): string {
    const premiumPhrases = [
      `Como nosso cliente ${userContext?.subscriptionPlan || userContext?.userData?.subscriptionPlan}, voc√™ tem acesso a essa an√°lise avan√ßada:`,
      "Aqui est√° o tratamento VIP que voc√™ merece:",
      "Analisando com nossos algoritmos premium:",
      "Vou me aprofundar um pouco mais, j√° que voc√™ √© nosso cliente especial:",
      "Como cliente premium, voc√™ recebe insights exclusivos:",
      "Aqui est√° uma an√°lise que s√≥ nossos clientes VIP t√™m acesso:"
    ];
    
    const randomPhrase = premiumPhrases[Math.floor(Math.random() * premiumPhrases.length)];
    const planName = userContext?.subscriptionPlan || userContext?.userData?.subscriptionPlan || 'Premium';
    
    return `${randomPhrase}\n\n${response}\n\nüíé Essa √© uma an√°lise exclusiva para seu plano ${planName}!`;
  }

  private getRelevantModules(message: string, userContext?: any): string {
    const modules: string[] = [];
    
    // M√≥dulos baseados no conte√∫do da mensagem
    if (message.match(/investimento|renda|aplica√ß√£o|carteira/i)) modules.push(INVESTMENT_MODULE);
    if (message.match(/meta|sonho|poupar|objetivo/i)) modules.push(GOALS_MODULE);
    if (message.match(/problema|erro|n√£o funciona|como fazer/i)) modules.push(SUPPORT_MODULE);
    if (message.match(/o que √©|como funciona|explicar|entender/i)) modules.push(EDUCATION_MODULE);
    
    // M√≥dulo premium baseado no plano do usu√°rio
    if (userContext?.subscriptionPlan === 'top' || userContext?.subscriptionPlan === 'enterprise' || userContext?.userData?.subscriptionPlan === 'top' || userContext?.userData?.subscriptionPlan === 'enterprise') {
      modules.push(PREMIUM_MODULE);
    }
    
    return modules.join('\n');
  }

  private async callAI(prompt: string): Promise<string> {
    try {
      const completion = await openai.chat.completions.create({
        model: 'deepseek-chat',
        messages: [{ role: 'system', content: prompt }],
        temperature: 0.7,
        max_tokens: 400,
      });

      return completion.choices[0]?.message?.content || '';
    } catch (error) {
      console.error('Erro ao chamar IA:', error);
      return 'Desculpe, estou com dificuldades t√©cnicas. Pode tentar novamente?';
    }
  }

  private postProcess(text: string): string {
    // Remove frases padr√£o indesejadas
    return text.replace(/Como consultor financeiro\.\.\./gi, '')
              .replace(/Voc√™ como cliente premium\.\.\./gi, '')
              .replace(/Como consultor certificado\.\.\./gi, '')
              .trim();
  }
}

// ===== SISTEMA DE APRENDIZADO CONT√çNUO =====

class FeedbackLearner {
  private feedbackLog: Map<string, Array<{
    message: string;
    response: string;
    rating: number;
    feedback: string;
  }>> = new Map();

  async processFeedback(userId: string, feedback: {
    originalMessage: string;
    originalResponse: string;
    rating: 1 | 2 | 3 | 4 | 5;
    comments: string;
  }) {
    // Armazena feedback
    const userFeedback = this.feedbackLog.get(userId) || [];
    userFeedback.push({
      message: feedback.originalMessage,
      response: feedback.originalResponse,
      rating: feedback.rating,
      feedback: feedback.comments
    });
    this.feedbackLog.set(userId, userFeedback);
    
    // Atualiza modelos (exemplo simplificado)
    if (feedback.rating <= 2) {
      await this.flagForReview(feedback.originalMessage, feedback.originalResponse);
    }
  }

  async generateImprovements() {
    const improvements: Array<{
      userId: string;
      issues: Array<{
        message: string;
        problem: string;
        rating: number;
      }>;
    }> = [];
    
    // Analisar feedback negativo
    for (const [userId, feedbacks] of this.feedbackLog.entries()) {
      const negativeFeedbacks = feedbacks.filter(f => f.rating <= 2);
      
      if (negativeFeedbacks.length > 0) {
        improvements.push({
          userId,
          issues: negativeFeedbacks.map(f => ({
            message: f.message,
            problem: f.feedback,
            rating: f.rating
          }))
        });
      }
    }
    
    return improvements;
  }

  private async flagForReview(message: string, response: string) {
    console.log(`[FeedbackLearner] Flagged for review: ${message.substring(0, 50)}...`);
    // Implementar l√≥gica de revis√£o
  }
}

// ===== CLASSE PRINCIPAL AISERVICE ATUALIZADA =====

class AIService {
  private marketService: MarketService;
  private responseCache: Map<string, any> = new Map();
  private learningCache: Map<string, number> = new Map();
  private feedbackDatabase: Map<string, any[]> = new Map();
  private userPreferences: Map<string, any> = new Map();
  private finnEngine: FinnEngine;
  private feedbackLearner: FeedbackLearner;
  private PREMIUM_SYSTEM_PROMPT = `
    Voc√™ √© o Finn, um consultor financeiro certificado (CFA, CFP, CNAI, CNPI) da plataforma Finnextho.
    Especialista em finan√ßas pessoais, investimentos e planejamento financeiro.
    Forne√ßa an√°lises detalhadas, estrat√©gias personalizadas e orienta√ß√µes avan√ßadas.
    Use linguagem t√©cnica quando apropriado, mas sempre explique conceitos complexos.
  `;

  private BASIC_SYSTEM_PROMPT = `
    Voc√™ √© o Finn, assistente financeiro da plataforma Finnextho.
    Ajude usu√°rios com d√∫vidas sobre finan√ßas pessoais, investimentos e uso da plataforma.
    Use linguagem clara e acess√≠vel, evitando termos t√©cnicos complexos.
    Sempre seja educado, paciente e prestativo.
  `;

  constructor() {
    this.marketService = new MarketService();
    this.finnEngine = new FinnEngine();
    this.feedbackLearner = new FeedbackLearner();
  }

  // ===== M√âTODOS PARA GEST√ÉO DE CONQUISTAS E EXPERI√äNCIA =====

  // M√©todo para dar conquistas baseado em a√ß√µes do usu√°rio
  async giveAchievement(userId: string, action: string): Promise<string> {
    try {
      const achievement = this.finnEngine['rewardSystem'].giveAchievement(userId, action);
      
      // Adicionar √† mem√≥ria de longo prazo
      this.finnEngine['longTermMemory'].addAchievement(userId, achievement);
      
      console.log(`[AIService] Achievement given to ${userId}: ${achievement}`);
      return achievement;
    } catch (error) {
      console.error('[AIService] Error giving achievement:', error);
      return '';
    }
  }

  // M√©todo para obter estat√≠sticas do usu√°rio
  async getUserStats(userId: string): Promise<any> {
    try {
      const emotionalContext = this.finnEngine['emotionalMemory'].getContext(userId);
      const longTermMemory = this.finnEngine['longTermMemory'].getMemory(userId);
      const rewardData = this.finnEngine['rewardSystem'].getUserReward(userId);
      const contextMemory = this.finnEngine['memory'].getContext(userId);

      return {
        emotional: {
          stressLevel: emotionalContext.stressLevel,
          recentEmotions: emotionalContext.lastEmotions,
          moodHistory: emotionalContext.moodHistory.slice(-5)
        },
        achievements: {
          total: longTermMemory.achievements.length,
          list: longTermMemory.achievements,
          points: rewardData.points,
          level: rewardData.level,
          streak: rewardData.streak
        },
        preferences: {
          detailLevel: contextMemory.preferences.detailLevel,
          favoriteFeatures: contextMemory.preferences.favoriteFeatures,
          riskProfile: contextMemory.financialContext.riskProfile
        },
        milestones: {
          total: longTermMemory.financialMilestones.length,
          recent: longTermMemory.financialMilestones.slice(-3)
        }
      };
    } catch (error) {
      console.error('[AIService] Error getting user stats:', error);
      return null;
    }
  }

  // M√©todo para detectar e celebrar marcos financeiros
  async detectAndCelebrateMilestones(userId: string, userContext: any): Promise<string[]> {
    const celebrations: string[] = [];
    
    try {
      // Detectar primeira transa√ß√£o
      if (userContext.totalTransacoes === 1) {
        const achievement = await this.giveAchievement(userId, 'first_transaction');
        if (achievement) {
          celebrations.push(`${achievement} - Sua primeira transa√ß√£o foi registrada!`);
        }
      }

      // Detectar primeira meta
      if (userContext.totalMetas === 1) {
        const achievement = await this.giveAchievement(userId, 'first_goal');
        if (achievement) {
          celebrations.push(`${achievement} - Sua primeira meta foi criada!`);
        }
      }

      // Detectar primeiro investimento
      if (userContext.totalInvestimentos === 1) {
        const achievement = await this.giveAchievement(userId, 'first_investment');
        if (achievement) {
          celebrations.push(`${achievement} - Seu primeiro investimento foi registrado!`);
        }
      }

      // Detectar streak de 7 dias
      const streak = this.finnEngine['rewardSystem'].updateStreak(userId);
      if (streak === 7) {
        const achievement = await this.giveAchievement(userId, 'streak_7_days');
        if (achievement) {
          celebrations.push(`${achievement} - Uma semana seguida cuidando das suas finan√ßas!`);
        }
      }

      // Detectar upgrade para premium
      if (userContext.subscriptionPlan === 'top' || userContext.subscriptionPlan === 'enterprise') {
        const achievement = await this.giveAchievement(userId, 'premium_upgrade');
        if (achievement) {
          celebrations.push(`${achievement} - Bem-vindo ao clube premium!`);
        }
      }

      return celebrations;
    } catch (error) {
      console.error('[AIService] Error detecting milestones:', error);
      return [];
    }
  }

  // M√©todo para gerar mensagens motivacionais personalizadas
  async generateMotivationalMessage(userId: string, userContext: any): Promise<string> {
    try {
      const emotionalContext = this.finnEngine['emotionalMemory'].getContext(userId);
      const stats = await this.getUserStats(userId);
      
      let motivationalMessage = '';

      // Baseado no n√≠vel de estresse
      if (emotionalContext.stressLevel > 7) {
        motivationalMessage = "Lembre-se: cada pequeno passo conta! Voc√™ est√° fazendo um √≥timo trabalho cuidando das suas finan√ßas.";
      } else if (emotionalContext.stressLevel < 3) {
        motivationalMessage = "Voc√™ est√° no caminho certo! Continue assim e ver√° os resultados!";
      } else {
        motivationalMessage = "Continue focado nos seus objetivos financeiros!";
      }

      // Adicionar baseado em conquistas
      if (stats.achievements.streak >= 7) {
        motivationalMessage += ` Incr√≠vel! ${stats.achievements.streak} dias seguidos!`;
      }

      // Adicionar baseado no plano
      if (userContext.subscriptionPlan === 'top' || userContext.subscriptionPlan === 'enterprise') {
        motivationalMessage += " Como cliente premium, voc√™ tem acesso a an√°lises exclusivas!";
      }

      return motivationalMessage;
    } catch (error) {
      console.error('[AIService] Error generating motivational message:', error);
      return "Continue cuidando das suas finan√ßas!";
    }
  }

  // M√©todo para adaptar resposta ao sentimento do usu√°rio
  async adaptResponseToSentiment(userId: string, response: string): Promise<string> {
    try {
      const emotionalContext = this.finnEngine['emotionalMemory'].getContext(userId);
      
      if (emotionalContext.stressLevel > 6) {
        return `Fica tranquilo! ${response} Vamos resolver isso juntos, passo a passo.`;
      } else if (emotionalContext.lastEmotions.includes('confus√£o')) {
        return `Vou explicar de forma bem clara: ${response} Entendeu? Posso detalhar mais se precisar.`;
      } else if (emotionalContext.lastEmotions.includes('felicidade')) {
        return `Que bom! ${response} Continue assim!`;
      }
      
      return response;
    } catch (error) {
      console.error('[AIService] Error adapting response to sentiment:', error);
      return response;
    }
  }

  // M√©todo para gerar upsell inteligente
  async generateUpsellMessage(userContext: any): Promise<string> {
    try {
      const plan = userContext.subscriptionPlan || userContext.userData?.subscriptionPlan || 'free';
      
      const upsellMessages = {
        free: "Voc√™ est√° deixando de economizar R$ 257/m√™s sem nossa an√°lise premium. Que tal experimentar o plano Essencial?",
        essencial: "Com o plano Top, voc√™ teria tido +14% de retorno nos √∫ltimos 3 meses. Quer ver como?",
        top: "Como cliente Top, voc√™ j√° tem acesso a tudo! Que tal convidar um amigo para a plataforma?",
        enterprise: "Sua empresa poderia otimizar R$ 12.500/ano em impostos com nossas ferramentas avan√ßadas."
      };

      return upsellMessages[plan as keyof typeof upsellMessages] || '';
    } catch (error) {
      console.error('[AIService] Error generating upsell message:', error);
      return '';
    }
  }

  private getCacheKey(systemPrompt: string, userMessage: string): string {
    return `${systemPrompt.substring(0, 50)}_${userMessage.substring(0, 50)}`;
  }

  private updateLearningCache(query: string, responseQuality: number) {
    const key = query.toLowerCase().trim();
    const currentScore = this.learningCache.get(key) || 0;
    this.learningCache.set(key, (currentScore + responseQuality) / 2);
  }

  private async callDeepSeekAPI(prompt: string): Promise<string> {
    const completion = await openai.chat.completions.create({
      model: 'deepseek-chat',
      messages: [{ role: 'system', content: prompt }],
      temperature: 0.7,
      max_tokens: 800,
    });
    return completion.choices[0]?.message?.content || '';
  }

  // M√âTODO PARA DETEC√á√ÉO DE A√á√ïES AUTOMATIZADAS
  async detectAutomatedAction(prompt: string): Promise<{
    intent: string;
    entities: any;
    confidence: number;
    requiresConfirmation: boolean;
    response: string;
  }> {
    try {
      console.log('[AIService] Detecting automated action with prompt');
      
      const completion = await openai.chat.completions.create({
        model: 'deepseek-chat',
        messages: [{ role: 'system', content: prompt }],
        temperature: 0.3, // Baixa temperatura para mais precis√£o
        max_tokens: 500,
        response_format: { type: 'json_object' } // For√ßa resposta JSON
      });
      
      const response = completion.choices[0]?.message?.content || '';
      console.log('[AIService] Action detection response:', response);
      
      // Tentar fazer parse do JSON
      try {
        const parsedResponse = JSON.parse(response);
        return {
          intent: parsedResponse.intent || 'UNKNOWN',
          entities: parsedResponse.entities || {},
          confidence: parsedResponse.confidence || 0.5,
          requiresConfirmation: parsedResponse.requiresConfirmation || false,
          response: parsedResponse.response || 'Ol√°! Como posso te ajudar hoje?'
        };
      } catch (parseError) {
        console.error('[AIService] Error parsing JSON response:', parseError);
        console.log('[AIService] Raw response that failed to parse:', response);
        return {
          intent: 'UNKNOWN',
          entities: {},
          confidence: 0.0,
          requiresConfirmation: false,
          response: 'Ol√°! Como posso te ajudar hoje?'
        };
      }
    } catch (error) {
      console.error('[AIService] Error detecting automated action:', error);
      return {
        intent: 'UNKNOWN',
        entities: {},
        confidence: 0.0,
        requiresConfirmation: false,
        response: 'Ol√°! Como posso te ajudar hoje?'
      };
    }
  }

  // M√âTODO PRINCIPAL ATUALIZADO
  async generateContextualResponse(
    systemPrompt: string,
    userMessage: string,
    conversationHistory: ChatMessage[],
    userContext?: any
  ) {
    const startTime = Date.now();
    
    try {
      // Se n√£o h√° contexto espec√≠fico, usar o novo sistema Finn
      if (!systemPrompt || systemPrompt.includes('Finn')) {
        const response = await this.finnEngine.generateResponse(
          userContext?.userId || 'anonymous',
          userMessage,
          userContext
        );

        return {
          text: response,
          analysisData: {
            responseTime: Date.now() - startTime,
            engine: 'finn',
            confidence: 0.9
          }
        };
      }

      // Fallback para o sistema antigo se necess√°rio
      const cacheKey = this.getCacheKey(systemPrompt, userMessage);
      if (this.responseCache.has(cacheKey)) {
        console.log(`[AIService] Cache hit - response time: ${Date.now() - startTime}ms`);
        return this.responseCache.get(cacheKey);
      }

      const limitedHistory = conversationHistory.slice(-2);

      const messages = [
        { role: 'system', content: systemPrompt },
        ...limitedHistory.map(msg => ({
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.content
        })),
        { role: 'user', content: userMessage }
      ];

      console.log(`[AIService] Sending request to DeepSeek - ${messages.length} messages`);

      const completion = await openai.chat.completions.create({
        model: 'deepseek-chat',
        messages: messages as any,
        temperature: 0.7,
        max_tokens: 400,
      });

      const response = {
        text: completion.choices[0]?.message?.content || '',
        analysisData: null
      };

      this.responseCache.set(cacheKey, response);
      
      if (this.responseCache.size > 30) {
        const firstKey = this.responseCache.keys().next().value;
        if (typeof firstKey === 'string') {
        this.responseCache.delete(firstKey);
        }
      }

      console.log(`[AIService] Response generated in ${Date.now() - startTime}ms`);
      return response;
    } catch (error) {
      console.error('Erro ao gerar resposta contextual:', error);
      throw new AppError(500, 'Erro ao processar sua mensagem. Por favor, tente novamente mais tarde.');
    }
  }

  // M√âTODO PARA AN√ÅLISE FINANCEIRA AVAN√áADA
  async getAdvancedFinancialAnalysis(
    context: string,
    query: string,
    conversationHistory: ChatMessage[]
  ) {
    try {
      console.log('[AIService] Sending expert request to DeepSeek -', conversationHistory.length, 'messages');
      
      const contextData = JSON.parse(context);
      const userData = contextData.userData;
      
      // Construir prompt com dados reais do usu√°rio
      const userContextPrompt = `
=== DADOS REAIS DO USU√ÅRIO ===
Nome: ${userData.name}
Email: ${userData.email}
Plano: ${userData.subscriptionPlan}
Status: ${userData.subscriptionStatus}

=== DADOS FINANCEIROS REAIS ===
Transa√ß√µes: ${userData.hasTransactions ? `${userData.totalTransacoes} transa√ß√µes registradas` : 'Nenhuma transa√ß√£o registrada'}
Investimentos: ${userData.hasInvestments ? `${userData.totalInvestimentos} investimentos registrados` : 'Nenhum investimento registrado'}
Metas: ${userData.hasGoals ? `${userData.totalMetas} metas definidas` : 'Nenhuma meta definida'}

${userData.hasTransactions ? `
=== RESUMO DAS TRANSA√á√ïES ===
Total: ${userData.transacoes?.total || 0}
Categorias: ${JSON.stringify(userData.transacoes?.categorias || {})}
√öltimas transa√ß√µes: ${JSON.stringify(userData.transacoes?.ultimas || [])}
` : ''}

${userData.hasInvestments ? `
=== RESUMO DOS INVESTIMENTOS ===
Total: ${userData.investimentos?.total || 0}
Tipos: ${JSON.stringify(userData.investimentos?.tipos || {})}
√öltimos investimentos: ${JSON.stringify(userData.investimentos?.ultimos || [])}
` : ''}

${userData.hasGoals ? `
=== RESUMO DAS METAS ===
Total: ${userData.metas?.total || 0}
Status: ${JSON.stringify(userData.metas?.status || {})}
Metas ativas: ${JSON.stringify(userData.metas?.ativas || [])}
` : ''}

${userData.transacoesCompletas ? `
=== TRANSA√á√ïES COMPLETAS ===
${JSON.stringify(userData.transacoesCompletas, null, 2)}
` : ''}

${userData.investimentosCompletos ? `
=== INVESTIMENTOS COMPLETOS ===
${JSON.stringify(userData.investimentosCompletos, null, 2)}
` : ''}

${userData.metasCompletas ? `
=== METAS COMPLETAS ===
${JSON.stringify(userData.metasCompletas, null, 2)}
` : ''}
`;

      const systemPrompt = `${this.PREMIUM_SYSTEM_PROMPT}

${userContextPrompt}

IMPORTANTE: Voc√™ tem acesso aos dados reais do usu√°rio. Use essas informa√ß√µes para fornecer an√°lises personalizadas e espec√≠ficas. Se o usu√°rio perguntar sobre dados que n√£o est√£o registrados, informe educadamente que os dados n√£o foram encontrados e sugira como registr√°-los.

PERGUNTA DO USU√ÅRIO: ${query}

HIST√ìRICO DA CONVERSA:
${conversationHistory.map(msg => `${msg.sender}: ${msg.content}`).join('\n')}

RESPONDA COMO UM CONSULTOR FINANCEIRO PREMIUM, USANDO OS DADOS REAIS DO USU√ÅRIO:`;

      const response = await this.callDeepSeekAPI(systemPrompt);
      const parsedResponse = this.parseAIResponse(response);

      return {
        analysisText: parsedResponse.analysisText || response,
        analysisData: parsedResponse.analysisData || null,
        confidence: parsedResponse.confidence || 0.95,
        userDataUsed: {
          name: userData.name,
          hasTransactions: userData.hasTransactions,
          hasInvestments: userData.hasInvestments,
          hasGoals: userData.hasGoals,
          totalTransacoes: userData.totalTransacoes || 0,
          totalInvestimentos: userData.totalInvestimentos || 0,
          totalMetas: userData.totalMetas || 0
        }
      };

    } catch (error) {
      console.error('[AIService] Error in advanced financial analysis:', error);
      return {
        analysisText: 'Desculpe, ocorreu um erro ao processar sua an√°lise financeira. Por favor, tente novamente.',
        analysisData: null,
        confidence: 0.5
      };
    }
  }

  // M√âTODO PARA ORIENTA√á√ÉO DA PLATAFORMA
  async getPlatformGuidance(query: string, userContext: any) {
    const startTime = Date.now();
    
    try {
      const platformPrompt = `
        ${CORE_SYSTEM_PROMPT}
        ${SUPPORT_MODULE}
        
        OBJETIVO: Ajudar usu√°rios a navegar e usar eficientemente a plataforma Finnextho.
        
        CONTEXTO DO USU√ÅRIO: ${JSON.stringify(userContext)}
        
        Pergunta do usu√°rio: ${query}
        
        Responda de forma clara, pr√°tica e espec√≠fica sobre como usar a plataforma Finnextho.
      `;

      const completion = await openai.chat.completions.create({
        model: 'deepseek-chat',
        messages: [{ role: 'system', content: platformPrompt }, { role: 'user', content: query }],
        temperature: 0.7,
        max_tokens: 600,
      });

      return {
        guidanceText: completion.choices[0]?.message?.content || '',
        responseTime: Date.now() - startTime
      };
    } catch (error) {
      console.error('Erro ao gerar orienta√ß√£o da plataforma:', error);
      throw new AppError(500, 'Erro ao processar orienta√ß√£o da plataforma.');
    }
  }

  // M√âTODO PARA RESPOSTA PERSONALIZADA COM CONTEXTO DO USU√ÅRIO
  async getPersonalizedResponseWithContext(
    userId: string,
    query: string,
    conversationHistory: ChatMessage[],
    userContext: any
  ) {
    try {
      const preferences = this.userPreferences.get(userId);
      
      // Personalizar prompt baseado nas prefer√™ncias do usu√°rio
      let personalizedPrompt = '';
      
      if (preferences) {
        personalizedPrompt = `
          PREFER√äNCIAS DO USU√ÅRIO:
          - Estilo preferido: ${preferences.preferredStyle}
          - N√≠vel de detalhe: ${preferences.detailLevel}
          - N√≠vel t√©cnico: ${preferences.technicalLevel}
          - Tamanho da resposta: ${preferences.responseLength}
          
          HIST√ìRICO DE FEEDBACK:
          - Avalia√ß√£o m√©dia: ${preferences.feedbackHistory?.filter(f => f.type === 'positive').length || 0} positivas
          - Problemas frequentes: ${preferences.feedbackHistory?.filter(f => f.type === 'negative').map(f => f.category).join(', ') || 'Nenhum'}
          
          Ajuste sua resposta baseado nessas prefer√™ncias para melhorar a satisfa√ß√£o do usu√°rio.
        `;
      }

      // Adicionar dados do usu√°rio ao prompt
      const userDataPrompt = `
        === DADOS DO USU√ÅRIO ===
        Nome: ${userContext.name || 'Usu√°rio'}
        Transa√ß√µes: ${userContext.hasTransactions ? `${userContext.totalTransacoes} transa√ß√µes registradas` : 'Nenhuma transa√ß√£o registrada'}
        Investimentos: ${userContext.hasInvestments ? `${userContext.totalInvestimentos} investimentos registrados` : 'Nenhum investimento registrado'}
        Metas: ${userContext.hasGoals ? `${userContext.totalMetas} metas definidas` : 'Nenhuma meta definida'}

        ${userContext.hasTransactions && userContext.transacoes ? `
        === RESUMO DAS TRANSA√á√ïES ===
        Total: ${userContext.transacoes.total}
        Categorias: ${JSON.stringify(userContext.transacoes.categorias)}
        √öltimas transa√ß√µes: ${JSON.stringify(userContext.transacoes.ultimas)}
        ` : ''}

        ${userContext.hasInvestments && userContext.investimentos ? `
        === RESUMO DOS INVESTIMENTOS ===
        Total: ${userContext.investimentos.total}
        Tipos: ${JSON.stringify(userContext.investimentos.tipos)}
        √öltimos investimentos: ${JSON.stringify(userContext.investimentos.ultimos)}
        ` : ''}

        ${userContext.hasGoals && userContext.metas ? `
        === RESUMO DAS METAS ===
        Total: ${userContext.metas.total}
        Status: ${JSON.stringify(userContext.metas.status)}
        Metas ativas: ${JSON.stringify(userContext.metas.ativas)}
        ` : ''}
      `;

      // Usar o prompt personalizado no contexto
      const systemPrompt = `
        Voc√™ √© o Finn, assistente financeiro da Finnextho. Seja amig√°vel, direto e natural nas respostas.
        
        ${userDataPrompt}
        
        IMPORTANTE: 
        - Use os dados do usu√°rio quando dispon√≠veis
        - Responda de forma conversacional e natural
        - N√£o mencione estruturas t√©cnicas ou metodologias
        - Mantenha respostas concisas e √∫teis
        - Se o usu√°rio perguntar sobre dados que n√£o est√£o registrados, informe educadamente e sugira como registr√°-los
      `;

      return await this.generateContextualResponse(
        systemPrompt,
        query,
        conversationHistory,
        userContext
      );
    } catch (error) {
      console.error('Erro ao gerar resposta personalizada:', error);
      throw new AppError(500, 'Erro ao gerar resposta personalizada');
    }
  }

  // M√âTODO PARA RESPOSTA PERSONALIZADA (ORIGINAL)
  async getPersonalizedResponse(
    userId: string,
    query: string,
    conversationHistory: ChatMessage[]
  ) {
    try {
      const preferences = this.userPreferences.get(userId);
      
      // Personalizar prompt baseado nas prefer√™ncias do usu√°rio
      let personalizedPrompt = '';
      
      if (preferences) {
        personalizedPrompt = `
          PREFER√äNCIAS DO USU√ÅRIO:
          - Estilo preferido: ${preferences.preferredStyle}
          - N√≠vel de detalhe: ${preferences.detailLevel}
          - N√≠vel t√©cnico: ${preferences.technicalLevel}
          - Tamanho da resposta: ${preferences.responseLength}
          
          HIST√ìRICO DE FEEDBACK:
          - Avalia√ß√£o m√©dia: ${preferences.feedbackHistory?.filter(f => f.type === 'positive').length || 0} positivas
          - Problemas frequentes: ${preferences.feedbackHistory?.filter(f => f.type === 'negative').map(f => f.category).join(', ') || 'Nenhum'}
          
          Ajuste sua resposta baseado nessas prefer√™ncias para melhorar a satisfa√ß√£o do usu√°rio.
        `;
      }

      // Usar o prompt personalizado no contexto
      const systemPrompt = `
        ${personalizedPrompt}
        
        ${CORE_SYSTEM_PROMPT}
        
        Responda de forma personalizada e √∫til, considerando o hist√≥rico de feedback do usu√°rio.
      `;

      return await this.generateContextualResponse(
        systemPrompt,
        query,
        conversationHistory
      );
    } catch (error) {
      console.error('Erro ao gerar resposta personalizada:', error);
      throw new AppError(500, 'Erro ao gerar resposta personalizada');
    }
  }

  // M√âTODOS AUXILIARES MANTIDOS
  async getMarketOverview() {
    return {
      sp500: 4500,
      ibovespa: 120000,
      cdi: 12.5,
      ipca: 4.2,
      dolar: 5.15,
      euro: 5.60
    };
  }

  async generateFollowUpQuestions(
    originalQuery: string,
    aiResponse: string
  ): Promise<string[]> {
    try {
      const contextAwareQuestions = [
        "Como posso aplicar essa an√°lise na minha carteira atual?",
        "Quais indicadores devo monitorar para acompanhar essa estrat√©gia?",
        "Como posso usar as ferramentas da plataforma para implementar essas recomenda√ß√µes?",
        "Qual seria o pr√≥ximo passo para otimizar minha situa√ß√£o financeira?",
        "Posso ver um exemplo pr√°tico de como isso funciona na plataforma?",
        "Quais funcionalidades do meu plano posso usar para isso?",
        "Como isso se relaciona com minhas metas financeiras?",
        "Que relat√≥rios da plataforma podem me ajudar com isso?"
      ];
      
      const relevantQuestions = contextAwareQuestions.slice(0, 3);
      return relevantQuestions;
    } catch (error) {
      console.error('Erro ao gerar perguntas de acompanhamento:', error);
      return [];
    }
  }

  private parseAIResponse(responseContent: string | undefined): any {
    if (!responseContent) {
      throw new AppError(500, 'Resposta da IA vazia');
    }

    try {
      return JSON.parse(responseContent);
    } catch (error) {
      return { text: responseContent.trim() };
    }
  }

  // SISTEMA DE FEEDBACK E APRENDIZADO
  async saveUserFeedback(
    userId: string,
    messageId: string,
    feedback: {
      rating: number; // 1-5 estrelas
      helpful: boolean;
      comment?: string;
      category: 'accuracy' | 'helpfulness' | 'clarity' | 'relevance';
      context: string;
    }
  ) {
    try {
      const userFeedback = {
        userId,
        messageId,
        timestamp: new Date(),
        ...feedback
      };

      // Salvar feedback no cache local
      if (!this.feedbackDatabase.has(userId)) {
        this.feedbackDatabase.set(userId, []);
      }
      this.feedbackDatabase.get(userId)!.push(userFeedback);

      // Atualizar prefer√™ncias do usu√°rio baseado no feedback
      await this.updateUserPreferences(userId, feedback);

      // Ajustar cache de aprendizado baseado no feedback
      this.adjustLearningCache(feedback);

      // Processar feedback no sistema de aprendizado
      await this.feedbackLearner.processFeedback(userId, {
        originalMessage: feedback.context,
        originalResponse: '',
        rating: feedback.rating as 1 | 2 | 3 | 4 | 5,
        comments: feedback.comment || ''
      });

      console.log(`[AIService] Feedback salvo para usu√°rio ${userId}: ${feedback.rating}/5`);
      
      return { success: true, message: 'Feedback registrado com sucesso!' };
    } catch (error) {
      console.error('Erro ao salvar feedback:', error);
      throw new AppError(500, 'Erro ao salvar feedback');
    }
  }

  private async updateUserPreferences(userId: string, feedback: any) {
    try {
      const currentPrefs = this.userPreferences.get(userId) || {
        preferredStyle: 'balanced',
        detailLevel: 'medium',
        technicalLevel: 'intermediate',
        responseLength: 'medium',
        topics: [],
        feedbackHistory: []
      };

      // Ajustar prefer√™ncias baseado no feedback
      if (feedback.rating >= 4) {
        // Usu√°rio gostou - manter estilo similar
        currentPrefs.feedbackHistory.push({
          type: 'positive',
          category: feedback.category,
          timestamp: new Date()
        });
      } else if (feedback.rating <= 2) {
        // Usu√°rio n√£o gostou - ajustar estilo
        currentPrefs.feedbackHistory.push({
          type: 'negative',
          category: feedback.category,
          timestamp: new Date()
        });

        // Ajustar baseado no coment√°rio
        if (feedback.comment) {
          const comment = feedback.comment.toLowerCase();
          if (comment.includes('muito t√©cnico') || comment.includes('complexo')) {
            currentPrefs.technicalLevel = 'basic';
          }
          if (comment.includes('muito longo') || comment.includes('verboso')) {
            currentPrefs.responseLength = 'short';
          }
          if (comment.includes('muito curto') || comment.includes('superficial')) {
            currentPrefs.responseLength = 'detailed';
          }
        }
      }

      this.userPreferences.set(userId, currentPrefs);
      console.log(`[AIService] Prefer√™ncias atualizadas para usu√°rio ${userId}`);
    } catch (error) {
      console.error('Erro ao atualizar prefer√™ncias:', error);
    }
  }

  private adjustLearningCache(feedback: any) {
    try {
      // Ajustar qualidade das respostas baseado no feedback
      const qualityAdjustment = feedback.rating >= 4 ? 0.1 : -0.1;
      
      // Aplicar ajuste ao cache de aprendizado
      this.learningCache.forEach((score, key) => {
        const newScore = Math.max(0, Math.min(1, score + qualityAdjustment));
        this.learningCache.set(key, newScore);
      });

      console.log(`[AIService] Cache de aprendizado ajustado baseado no feedback`);
    } catch (error) {
      console.error('Erro ao ajustar cache de aprendizado:', error);
    }
  }

  async getUserFeedbackAnalytics(userId: string) {
    try {
      const userFeedback = this.feedbackDatabase.get(userId) || [];
      const preferences = this.userPreferences.get(userId);

      const analytics = {
        totalFeedback: userFeedback.length,
        averageRating: userFeedback.length > 0 
          ? userFeedback.reduce((sum, f) => sum + f.rating, 0) / userFeedback.length 
          : 0,
        helpfulnessRate: userFeedback.length > 0
          ? (userFeedback.filter(f => f.helpful).length / userFeedback.length) * 100
          : 0,
        categoryBreakdown: userFeedback.reduce((acc, f) => {
          acc[f.category] = (acc[f.category] || 0) + 1;
          return acc;
        }, {} as any),
        preferences: preferences,
        recentFeedback: userFeedback.slice(-5)
      };

      return analytics;
    } catch (error) {
      console.error('Erro ao gerar analytics de feedback:', error);
      throw new AppError(500, 'Erro ao gerar analytics');
    }
  }

  // NOVO M√âTODO PARA OBTER MELHORIAS SUGERIDAS (SIMPLIFICADO)
  async getSuggestedImprovements(): Promise<any[]> {
    return [];
  }

  // NOVO M√âTODO: Streaming de Respostas
  async generateStreamingResponse(
    responseType: 'basic' | 'premium',
    userMessage: string,
    conversationHistory: ChatMessage[],
    userContext?: any
  ): Promise<AsyncGenerator<string, void, unknown>> {
    const systemPrompt = responseType === 'premium' 
      ? this.PREMIUM_SYSTEM_PROMPT 
      : this.BASIC_SYSTEM_PROMPT;

    const contextPrompt = this.buildContextPrompt(userContext, conversationHistory);
    const fullPrompt = `${systemPrompt}\n\n${contextPrompt}\n\nUsu√°rio: ${userMessage}\n\nAssistente:`;

    return this.streamFromDeepSeek(fullPrompt);
  }

  private async *streamFromDeepSeek(prompt: string): AsyncGenerator<string, void, unknown> {
    try {
      const stream = await openai.chat.completions.create({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        stream: true,
        temperature: 0.7,
        max_tokens: 2000
      });

      for await (const chunk of stream) {
        const content = chunk.choices[0]?.delta?.content;
        if (content) {
          yield content;
        }
      }
    } catch (error) {
      console.error('Erro no streaming da DeepSeek:', error);
      yield 'Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente.';
    }
  }

  private buildContextPrompt(userContext?: any, conversationHistory: ChatMessage[] = []): string {
    let contextPrompt = '';

    // Adicionar contexto do usu√°rio
    if (userContext) {
      contextPrompt += `\nContexto do usu√°rio:\n`;
      if (userContext.userData) {
        contextPrompt += `- Nome: ${userContext.userData.name}\n`;
        contextPrompt += `- Plano: ${userContext.userData.subscriptionPlan || 'Gratuito'}\n`;
        contextPrompt += `- Premium: ${userContext.userData.isPremium ? 'Sim' : 'N√£o'}\n`;
        contextPrompt += `- Tem transa√ß√µes: ${userContext.userData.hasTransactions ? 'Sim' : 'N√£o'}\n`;
        contextPrompt += `- Tem investimentos: ${userContext.userData.hasInvestments ? 'Sim' : 'N√£o'}\n`;
        contextPrompt += `- Tem metas: ${userContext.userData.hasGoals ? 'Sim' : 'N√£o'}\n`;
      }

      if (userContext.financialData) {
        if (userContext.financialData.transactions) {
          contextPrompt += `\nResumo de transa√ß√µes:\n`;
          contextPrompt += `- Total: ${userContext.financialData.transactions.total}\n`;
          contextPrompt += `- Categorias: ${Object.keys(userContext.financialData.transactions.categorias).join(', ')}\n`;
        }

        if (userContext.financialData.investments) {
          contextPrompt += `\nResumo de investimentos:\n`;
          contextPrompt += `- Total: ${userContext.financialData.investments.total}\n`;
          contextPrompt += `- Tipos: ${Object.keys(userContext.financialData.investments.tipos).join(', ')}\n`;
        }

        if (userContext.financialData.goals) {
          contextPrompt += `\nResumo de metas:\n`;
          contextPrompt += `- Total: ${userContext.financialData.goals.total}\n`;
          contextPrompt += `- Ativas: ${userContext.financialData.goals.ativas?.length || 0}\n`;
        }
      }
    }

    // Adicionar hist√≥rico recente da conversa
    if (conversationHistory.length > 0) {
      const recentHistory = conversationHistory.slice(-6); // √öltimas 6 mensagens
      contextPrompt += `\n\nHist√≥rico recente da conversa:\n`;
      recentHistory.forEach(msg => {
        const role = msg.sender === 'user' ? 'Usu√°rio' : 'Assistente';
        contextPrompt += `${role}: ${msg.content}\n`;
      });
    }

    return contextPrompt;
  }
}

export default AIService;

/*
=== EXEMPLOS DE USO DO NOVO SISTEMA FINN ===

// 1. Uso b√°sico com o novo sistema
const aiService = new AIService();

// Resposta autom√°tica usando o Finn Engine
const response = await aiService.generateContextualResponse(
  '', // systemPrompt vazio ativa o Finn
  'Como cadastrar uma transa√ß√£o?',
  [], // conversationHistory
  { userId: 'user123', subscriptionPlan: 'essencial' }
);

// 2. An√°lise financeira avan√ßada para usu√°rios premium
const premiumAnalysis = await aiService.getAdvancedFinancialAnalysis(
  JSON.stringify({
    name: 'Jo√£o Silva',
    subscriptionPlan: 'top',
    hasInvestments: true,
    hasGoals: true,
    portfolioValue: 50000
  }),
  'Como rebalancear minha carteira?',
  []
);

// 3. Orienta√ß√£o da plataforma
const guidance = await aiService.getPlatformGuidance(
  'Onde encontro meus relat√≥rios?',
  { subscriptionPlan: 'essencial' }
);

// 4. Resposta personalizada baseada em feedback
const personalized = await aiService.getPersonalizedResponse(
  'user123',
  'Quais investimentos s√£o melhores para mim?',
  []
);

// 5. Sistema de feedback
await aiService.saveUserFeedback('user123', 'msg456', {
  rating: 5,
  helpful: true,
  comment: 'Resposta muito clara e √∫til!',
  category: 'helpfulness',
  context: 'Como investir melhor?'
});

// 6. Analytics de feedback
const analytics = await aiService.getUserFeedbackAnalytics('user123');

// 7. Sugest√µes de melhoria
const improvements = await aiService.getSuggestedImprovements();

=== CARACTER√çSTICAS DO NOVO SISTEMA ===

‚úÖ Sistema de prompts modular e especializado
‚úÖ Mem√≥ria contextual por usu√°rio
‚úÖ Personaliza√ß√£o baseada em feedback
‚úÖ M√≥dulos espec√≠ficos para cada tipo de pergunta
‚úÖ Sistema de aprendizado cont√≠nuo
‚úÖ An√°lises premium para usu√°rios Top/Enterprise
‚úÖ Orienta√ß√£o da plataforma inteligente
‚úÖ Proibi√ß√µes para evitar respostas indesejadas
‚úÖ Templates de resposta estruturados
‚úÖ Adapta√ß√£o autom√°tica ao n√≠vel do usu√°rio

=== M√ìDULOS DISPON√çVEIS ===

1. INVESTMENT_MODULE - Para perguntas sobre investimentos
2. GOALS_MODULE - Para metas financeiras
3. SUPPORT_MODULE - Para suporte t√©cnico
4. EDUCATION_MODULE - Para educa√ß√£o financeira
5. PREMIUM_MODULE - Para an√°lises avan√ßadas (usu√°rios Top/Enterprise)

=== FLUXO DE FUNCIONAMENTO ===

1. Usu√°rio envia mensagem
2. Sistema identifica o tipo de pergunta
3. Carrega m√≥dulos relevantes
4. Aplica contexto do usu√°rio
5. Gera resposta personalizada
6. Atualiza mem√≥ria contextual
7. Coleta feedback (opcional)
8. Aprende e melhora continuamente
*/
